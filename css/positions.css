/* ==========================================================================
   POSICIONAMIENTO EN CSS: GU√çA COMPLETA
   ==========================================================================

   El posicionamiento determina c√≥mo se ubican y comportan los elementos en la p√°gina.
   Por defecto, los elementos siguen el "flujo normal":
   - Elementos de bloque: uno debajo del otro
   - Elementos de l√≠nea: uno al lado del otro

   REQUISITOS B√ÅSICOS PARA USAR POSICIONAMIENTO:
   1. Entender el flujo normal del documento
   2. Conocer la diferencia entre elementos de l√≠nea y bloque
   3. Comprender el box model */


/* ==========================================================================
   1. POSITION: STATIC (Valor por defecto)
   ========================================================================== */
   .static {
    background-color: yellow;
    position: static;
    top: 10px;              /* No tiene efecto */
    left: 10px;             /* No tiene efecto */

    /* ¬øQU√â ES?
       El posicionamiento normal que tienen todos los elementos
       
       ‚úÖ √öSALO CUANDO:
       - Quieres el comportamiento normal del elemento
       - Necesitas eliminar otro tipo de posicionamiento
       
       ‚ùå NO LO USES CUANDO:
       - Necesites mover el elemento de su posici√≥n
       - Quieras crear un contenedor para position: absolute
       
       ‚ö†Ô∏è LIMITACIONES:
       - No acepta propiedades de posicionamiento (top, left, etc.)
       - No acepta z-index
       
       üîç ERRORES COMUNES:
       - Intentar mover elementos con top/left en static
       - Olvidar que es el valor por defecto */
}


/* ==========================================================================
   2. POSITION: RELATIVE
   ========================================================================== */
.relative {
    background-color: turquoise;
    position: relative;
    width: 300px;
    height: 200px;
    top: 20px;
    left: 20px;

    /* ¬øQU√â ES?
       Posicionamiento relativo a su posici√≥n original
       
       ‚úÖ √öSALO CUANDO:
       - Necesites mover un elemento ligeramente
       - Quieras crear un contexto para elementos absolute
       - Necesites usar z-index
       
       ‚ùå NO LO USES CUANDO:
       - El movimiento afecte negativamente el layout
       - No necesites mover el elemento
       - Solo quieras crear contenedor (usa otros m√©todos)
       
       ‚ö†Ô∏è LIMITACIONES:
       - Mantiene su espacio original (puede crear espacios no deseados)
       - Puede causar problemas de rendimiento si se anima
       
       üîç ERRORES COMUNES:
       - Usar relative solo para crear contexto posicionado
       - Olvidar que mantiene su espacio original
       - Mover elementos demasiado lejos de su posici√≥n */
}


/* ==========================================================================
   3. POSITION: ABSOLUTE
   ========================================================================== */
.absolute {
    background-color: tomato;
    position: absolute;
    width: 200px;
    height: 50px;
    right: 0;
    bottom: 0;

    /* ¬øQU√â ES?
       Posicionamiento fuera del flujo normal, relativo a un ancestro posicionado
       
       ‚úÖ √öSALO CUANDO:
       - Necesites superponer elementos
       - Quieras posicionar elementos con precisi√≥n
       - Trabajes con componentes modales o tooltips
       
       ‚ùå NO LO USES CUANDO:
       - El elemento deba mantener su espacio en el layout
       - No tengas un contenedor posicionado definido
       - Trabajes con dise√±os responsivos simples
       
       ‚ö†Ô∏è LIMITACIONES:
       - Pierde su espacio en el documento
       - Puede causar problemas de accesibilidad
       - Puede complicar el dise√±o responsive
       
       üîç ERRORES COMUNES:
       - Olvidar establecer un contenedor posicionado
       - Usar absolute para layouts b√°sicos
       - No considerar el comportamiento en m√≥viles */
}

/* Ejemplo de absolute con padre relativo */
.relative-parent {
    background-color: khaki;
    position: relative;    /* Contexto para absolute */
    width: 600px;
    height: 50px;
    top: 50px;
    left: 50px;
}

.absolute-child {
    background-color: lightcoral;
    position: absolute;
    top: -50px;
    left: -30px;

    /* ‚ö†Ô∏è REQUISITOS DEL CONTENEDOR:
       - Debe tener position distinto de static
       - Debe tener dimensiones definidas si es necesario
       - Debe considerar el desbordamiento
       
       üîç ERRORES COMUNES EN LA RELACI√ìN PADRE-HIJO:
       - Olvidar posicionar el padre
       - No considerar el desbordamiento
       - Valores negativos inesperados */
}


/* ==========================================================================
   4. POSITION: FIXED
   ========================================================================== */
.fixed {
    background-color: lightgreen;
    position: fixed;
    width: 300px;
    height: 100px;
    right: 20px;
    bottom: 10px;

    /* ¬øQU√â ES?
       Posicionamiento fijo respecto a la ventana del navegador
       
       ‚úÖ √öSALO CUANDO:
       - Necesites elementos siempre visibles
       - Implementes barras de navegaci√≥n fijas
       - Crees botones de acci√≥n flotantes
       
       ‚ùå NO LO USES CUANDO:
       - La p√°gina tenga poco contenido
       - Pueda interferir con el contenido importante
       - Trabajes con teclados virtuales m√≥viles
       
       ‚ö†Ô∏è LIMITACIONES:
       - Puede ser problem√°tico en m√≥viles
       - Puede ocultar contenido importante
       - Consume recursos de rendimiento
       
       üîç ERRORES COMUNES:
       - No considerar viewports peque√±os
       - Usar fixed para elementos temporales
       - Olvidar el impacto en la accesibilidad */
}


/* ==========================================================================
   5. POSITION: STICKY
   ========================================================================== */
.sticky {
    background-color: lightblue;
    position: sticky;
    top: 50px;

    /* ¬øQU√â ES?
       Posicionamiento h√≠brido que cambia entre relative y fixed
       
       ‚úÖ √öSALO CUANDO:
       - Necesites encabezados que se mantengan visibles
       - Quieras navegaci√≥n que se fije al scroll
       - Implementes √≠ndices de contenido
       
       ‚ùå NO LO USES CUANDO:
       - El navegador no lo soporte (IE11)
       - El contenedor no tenga scroll
       - No tengas un punto de anclaje claro
       
       ‚ö†Ô∏è REQUISITOS:
       1. El contenedor padre debe:
          - Tener altura definida
          - Permitir scroll
          - No tener overflow: hidden
       2. Debe especificarse al menos una propiedad:
          top, right, bottom o left
       
       üîç ERRORES COMUNES:
       - No proporcionar un contenedor adecuado
       - Olvidar especificar el punto de adhesi√≥n
       - Usar en contenedores sin scroll */
}

.sticky-parent {
    border: thin dashed black;
    height: 600px;          /* Necesario para sticky */
}

.sticky-child {
    background-color: lightgray;
    position: sticky;
    top: 75px;
}


/* ==========================================================================
   CONSIDERACIONES DE RENDIMIENTO Y ACCESIBILIDAD
   ========================================================================== 

   üöÄ RENDIMIENTO:
   1. Position: relative
      - Causa reflow en el elemento y sus hijos
      - Evitar en animaciones frecuentes
   
   2. Position: absolute/fixed
      - Menor impacto en el layout
      - Mejor para animaciones
   
   3. Position: sticky
      - Requiere c√°lculos en cada scroll
      - Usar con moderaci√≥n

   ‚ôø ACCESIBILIDAD:
   1. Fixed/Sticky
      - Asegurar que no oculten contenido importante
      - Proporcionar manera de cerrar/ocultar
   
   2. Absolute
      - Mantener orden l√≥gico en HTML
      - Cuidado con superposiciones
   
   üì± RESPONSIVE:
   1. Fixed
      - Considerar teclados virtuales
      - Adaptar tama√±os para m√≥viles
   
   2. Absolute
      - Puede necesitar media queries
      - Considerar diferentes tama√±os de pantalla
   
   3. Sticky
      - Verificar comportamiento en diferentes dispositivos
      - Ajustar puntos de adhesi√≥n seg√∫n viewport */ 


/* ======================================================================
   Z-INDEX: GU√çA COMPLETA
   De principiante a experto
   ====================================================================== */

/* SECCI√ìN 1: CONCEPTOS B√ÅSICOS
   ====================================================================== */

/* 
 * ¬øQu√© es z-index?
 * ----------------
 * Es una propiedad CSS que controla la profundidad visual de los elementos posicionados,
 * determinando cu√°l aparece delante o detr√°s de otros elementos.
 *
 * Valores permitidos:
 * ------------------
 * - auto (valor por defecto)
 * - N√∫meros enteros (positivos o negativos)
 * - initial (vuelve al valor inicial)
 * - inherit (hereda el valor del padre)
 */

/* Ejemplo b√°sico de superposici√≥n */
.z-index-1,
.z-index-2 {
    background-color: mediumaquamarine;
    border: thin solid black;
    position: relative;  /* ¬°IMPORTANTE! z-index solo funciona con elementos posicionados */
    width: 200px;
    height: 200px;
}

/* Primer elemento con z-index bajo */
.z-index-1 {
    z-index: 1;    /* Este elemento estar√° detr√°s */
}

/* Segundo elemento con z-index alto */
.z-index-2 {
    top: -200px;   /* Posicionamiento para crear superposici√≥n */
    left: 100px;
    z-index: 2;    /* Este elemento estar√° delante */
}

/* SECCI√ìN 2: CONTEXTOS DE APILAMIENTO Y ELEMENTOS PADRE-HIJO
   ====================================================================== */

/* 
 * CONCEPTO CLAVE: Contexto de Apilamiento
 * --------------------------------------
 * Un contexto de apilamiento es como una "capa" independiente donde los z-index
 * funcionan de manera aislada. Se crea cuando:
 * 1. El elemento ra√≠z (html)
 * 2. position: relative/absolute con z-index ‚â† auto
 * 3. position: fixed o sticky
 * 4. opacity < 1
 * 5. transform, filter, perspective, clip-path, mask, etc.
 */

/* Ejemplo de contexto padre-hijo */
.z-index-parent {
    background-color: mediumorchid;
    width: 300px;
    height: 300px;
    position: relative;
    /* z-index: 2; */  /* IMPORTANTE: Comentado para demostrar comportamiento por defecto */
}

.z-index-child {
    background-color: mediumvioletred;
    position: relative;
    width: 150px;
    height: 150px;
    top: -75px;
    left: 75px;
    z-index: -3;    /* Valor negativo para demostrar comportamiento con padre */
}

/* SECCI√ìN 3: CASOS PR√ÅCTICOS Y SITUACIONES REALES
   ====================================================================== */

/* Ejemplo: Men√∫ desplegable */
.menu-dropdown {
    position: relative;
    z-index: 100;    /* Valor alto para asegurar visibilidad */
}

.submenu {
    position: absolute;
    z-index: 101;    /* Mayor que el padre para garantizar que aparezca encima */
    display: none;    /* Oculto por defecto */
}

.menu-dropdown:hover .submenu {
    display: block;   /* Se muestra al hacer hover */
}

/* Ejemplo: Modal con overlay */
.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 1000;
}

.modal-content {
    position: fixed;
    z-index: 1001;   /* Mayor que el overlay */
}

/* SECCI√ìN 4: PROBLEMAS COMUNES Y SOLUCIONES
   ====================================================================== */

/* Problema 1: Z-index no funciona */
.no-funciona {
    z-index: 999;    /* ‚ùå No funcionar√° sin position */
}

/* Soluci√≥n */
.si-funciona {
    position: relative;
    z-index: 999;    /* ‚úÖ Ahora s√≠ funcionar√° */
}

/* Problema 2: Elemento hijo no se muestra detr√°s del padre */
.padre-problema {
    position: relative;
    /* Sin z-index definido */
}

.hijo-problema {
    position: relative;
    z-index: -1;     /* ‚ùå No se mostrar√° detr√°s sin z-index en el padre */
}

/* Soluci√≥n */
.padre-solucion {
    position: relative;
    z-index: 0;      /* ‚úÖ Ahora el hijo con z-index negativo s√≠ se mostrar√° detr√°s */
}

/* SECCI√ìN 5: BUENAS PR√ÅCTICAS Y SISTEMA DE CAPAS
   ====================================================================== */

/* 
 * Sistema de capas organizado:
 * ---------------------------
 * 1-10: Elementos base
 * 11-20: Navegaci√≥n
 * 21-30: Dropdowns
 * 31-40: Tooltips
 * 41-50: Modales
 * 51-60: Notificaciones
 */

:root {
    /* Variables CSS para manejo consistente de z-index */
    --z-base: 1;
    --z-nav: 10;
    --z-dropdown: 20;
    --z-tooltip: 30;
    --z-modal: 40;
    --z-notification: 50;
}

/* Ejemplo de uso del sistema de capas */
.base-content {
    position: relative;
    z-index: var(--z-base);
}

.main-nav {
    position: relative;
    z-index: var(--z-nav);
}

/* SECCI√ìN 6: EJEMPLOS AVANZADOS
   ====================================================================== */

/* Ejemplo: Capas m√∫ltiples con superposici√≥n compleja */
.capa-base {
    position: relative;
    z-index: var(--z-base);
}

.capa-media {
    position: absolute;
    z-index: calc(var(--z-base) + 5);  /* Uso de calc() para z-index din√°mico */
}

.capa-superior {
    position: absolute;
    z-index: calc(var(--z-base) + 10);
}

/* Ejemplo: Manejo de z-index en componentes anidados */
.componente-padre {
    position: relative;
    z-index: 0;
}

.componente-hijo {
    position: relative;
    /* Hereda contexto del padre pero mantiene su propio subcontexto */
    z-index: 1;
}

.componente-nieto {
    position: absolute;
    /* z-index relativo al contexto del hijo */
    z-index: -1;
}

/* 
 * NOTAS IMPORTANTES:
 * -----------------
 * 1. Siempre usar position con z-index
 * 2. Evitar valores muy altos (max: 999)
 * 3. Usar sistema de capas consistente
 * 4. Documentar valores especiales
 * 5. Considerar contextos de apilamiento
 */

