/* ==========================================
   1. SELECTORES DE HIJOS
   ========================================== 
   Los selectores de hijos nos ayudan a elegir elementos que est√°n
   dentro de otros elementos. Es como buscar cosas dentro de cajas. */

/* SELECTOR DE HIJOS DIRECTOS (>)
   - Solo afecta a los elementos que est√°n "justo dentro" del padre
   - Es como elegir solo los hijos, no los nietos
   
   Ejemplo: 
   <ul class="hijos-directos">
     <li>Este S√ç se pinta ‚úÖ</li>
     <div>
       <li>Este NO se pinta ‚ùå</li>
     </div>
   </ul> */
.hijos-directos>li {
    background-color: aquamarine;
}

/* SELECTOR DE DESCENDIENTES (espacio)
   - Afecta a TODOS los elementos que est√°n dentro, no importa qu√© tan profundo
   - Es como elegir hijos, nietos, bisnietos, etc.
   
   Ejemplo:
   <div class="hijos-descendientes">
     <b>Este S√ç se pinta ‚úÖ</b>
     <p>
       <b>Este tambi√©n se pinta ‚úÖ</b>
     </p>
   </div> */
.hijos-descendientes b {
    background-color: rebeccapurple
}

/* ==========================================
   2. SELECTORES DE HERMANOS
   ========================================== 
   Los selectores de hermanos nos ayudan a elegir elementos que est√°n
   al mismo nivel, uno despu√©s de otro. Como elegir hermanos en una familia. */

/* SELECTOR DE HERMANOS GENERALES (~)
   - Afecta a TODOS los elementos hermanos que vienen DESPU√âS
   - Es como decir "todos tus hermanos menores"
   
   Ejemplo:
   <ul>
     <li class="hermanos-general">Punto de partida</li>
     <li>Este S√ç se pinta ‚úÖ</li>
     <li>Este tambi√©n ‚úÖ</li>
     <li>Y este tambi√©n ‚úÖ</li>
   </ul> */
.hermanos-general~li {
    background-color: yellowgreen;
}

/* SELECTOR DE HERMANO ADYACENTE (+)
   - Solo afecta al elemento que viene JUSTO DESPU√âS
   - Es como decir "solo tu siguiente hermano"
   
   Ejemplo:
   <ul>
     <li class="hermanos-adyacentes">Punto de partida</li>
     <li>Este S√ç se pinta ‚úÖ</li>
     <li>Este ya NO se pinta ‚ùå</li>
   </ul> */
.hermanos-adyacentes+li {
    background-color: yellow;
}

/* ==========================================
   3. SELECTORES DE ATRIBUTOS
   ========================================== 
   Los selectores de atributos nos permiten elegir elementos bas√°ndonos
   en sus atributos HTML (como href, class, id, etc.) */

/* TIENE EL ATRIBUTO [attr]
   - Selecciona elementos que simplemente tienen el atributo, sin importar su valor
   
   Ejemplo: Todos los enlaces que tengan href
   <a href="...">Este S√ç ‚úÖ</a>
   <a>Este NO ‚ùå</a> */
.selectores-atributos a[href] {
    color: chocolate;
}

/* ATRIBUTO EXACTO [attr="valor"]
   - El atributo debe ser EXACTAMENTE igual al valor
   
   Ejemplo: Enlaces que abren en nueva pesta√±a
   <a target="_blank">Este S√ç ‚úÖ</a>
   <a target="otro">Este NO ‚ùå</a> */
.selectores-atributos a[target="_blank"] {
    font-weight: bold;
}

/* CONTIENE [attr*="valor"]
   - El atributo contiene el texto en CUALQUIER parte
   
   Ejemplo: Enlaces que contienen "jonmircha" en cualquier parte
   <a href="jonmircha.com">Este S√ç ‚úÖ</a>
   <a href="www.jonmircha.es">Este tambi√©n ‚úÖ</a> */
.selectores-atributos a[href*="jonmircha"] {
    font-size: 24px;
    color: black;
}

/* EMPIEZA CON [attr^="valor"]
   - El atributo debe EMPEZAR con el valor
   
   Ejemplo: Enlaces que empiezan con http
   <a href="http://...">Este S√ç ‚úÖ</a>
   <a href="www...">Este NO ‚ùå</a> */
.selectores-atributos a[href^="http"] {
    text-decoration: none;
}

/* TERMINA CON [attr$="valor"]
   - El atributo debe TERMINAR con el valor
   
   Ejemplo: Enlaces que terminan en .com
   <a href="sitio.com">Este S√ç ‚úÖ</a>
   <a href="sitio.net">Este NO ‚ùå</a> */
.selectores-atributos a[href$=".com"] {
    color: red;
}

/* PALABRA COMPLETA [attr~="valor"]
   - Busca el valor como palabra separada
   
   Ejemplo: Elementos con la clase exacta "cursos"
   <a class="cursos">Este S√ç ‚úÖ</a>
   <a class="mis-cursos">Este NO ‚ùå</a> */
.selectores-atributos a[class~="cursos"] {
    background-color: slateblue;
}

/* VALOR O PREFIJO [attr|="valor"]
   - Coincide con el valor exacto O con el valor seguido de gui√≥n
   
   Ejemplo: Elementos con class="menu" o que empiezan con "menu-"
   <a class="menu">Este S√ç ‚úÖ</a>
   <a class="menu-item">Este S√ç ‚úÖ</a>
   <a class="menuitem">Este NO ‚ùå</a> */
.selectores-atributos a[class|="menu"] {
    background-color: aqua;
    font-style: italic;
}

/* https://developer.mozilla.org/es/docs/Web/CSS/Pseudo-classes */
/* ==========================================
   4. PSEUDOCLASES DE FORMULARIOS
   ========================================== 
   Las pseudoclases de formularios nos ayudan a dar estilos a los campos
   de formulario seg√∫n su estado */

/* CAMPO REQUERIDO (:required)
   - Aplica a campos que son obligatorios
   <input required> */
.form-pseudoclases *:required {
    border-color: yellow;
}

/* CAMPO V√ÅLIDO (:valid)
   - Aplica cuando el campo cumple con las reglas
   - Por ejemplo, un email bien escrito */
.form-pseudoclases *:valid {
    border-color: green;
}

/* CAMPO INV√ÅLIDO (:invalid)
   - Aplica cuando el campo NO cumple con las reglas
   - Por ejemplo, un email mal escrito */
.form-pseudoclases *:invalid {
    border-color: red;
}

/* CAMPO CON FOCO (:focus)
   - Aplica cuando el usuario est√° escribiendo/seleccionando el campo */
.form-pseudoclases *:focus {
    border-color: blue;
}

/* CAMPO DESHABILITADO (:disabled)
   - Aplica a campos que no se pueden usar
   <input disabled> */
.form-pseudoclases *:disabled {
    background-color: gray;
}

/* ==========================================
   5. PSEUDOCLASES DE ENLACES Y ELEMENTOS
   ========================================== */

/* ENLACE VISITADO (:visited)
   - Cambia el estilo de los enlaces que ya visitaste */
.menu-pseudoclases a:visited {
    color: purple;
}

/* MOUSE ENCIMA (:hover)
   - Se aplica cuando pasas el mouse por encima */
.menu-pseudoclases a:hover {
    color: red;
}

/* ELEMENTO OBJETIVO (:target)
   - Se aplica al elemento al que acabas de llegar por un enlace interno
   - Por ejemplo, cuando haces clic en #seccion-1 */
#temario-css:target {
    background-color: yellow;
    color: black;
}

/* ==========================================
   6. PSEUDOCLASES DE POSICI√ìN
   ========================================== 
   Nos ayudan a seleccionar elementos seg√∫n su posici√≥n en una lista */

/* √öLTIMO HIJO (:last-child)
   - Selecciona el √∫ltimo elemento */
.lista-pseudoclases li:last-child {
    background-color: crimson;
}

/* PRIMER HIJO (:first-child)
   - Selecciona el primer elemento */
.lista-pseudoclases li:first-child {
    background-color: aquamarine;
}

/* HIJO ESPEC√çFICO (:nth-child())
   - Selecciona elementos seg√∫n su posici√≥n
   - Puede usar n√∫meros (2), f√≥rmulas (2n), odd (impares) o even (pares) */
.lista-pseudoclases li:nth-child(2) {
    /* Segundo elemento */
    background-color: burlywood;
}

.lista-pseudoclases li:nth-child(2n) {
    /* Cada dos elementos */
    font-size: 40px;
}

.lista-pseudoclases li:nth-child(4n) {
    /* Cada cuatro elementos */
    font-weight: bold;
}

.lista-pseudoclases li:nth-child(odd) {
    /* Elementos impares */
    color: blue;
}

.lista-pseudoclases li:nth-child(even) {
    /* Elementos pares */
    color: blue;
}

/* ==========================================
   7. PSEUDOCLASES DE TIPO
   ========================================== 
   Similar a las de posici√≥n, pero solo cuenta elementos del mismo tipo */

/* PRIMER ELEMENTO DE SU TIPO */
.articulo-pseudoclases p:first-of-type {
    color: green;
}

/* √öLTIMO ELEMENTO DE SU TIPO */
.articulo-pseudoclases p:last-of-type {
    color: red;
}

/* TERCER ELEMENTO DE SU TIPO */
.articulo-pseudoclases p:nth-of-type(3) {
    color: blue;
}

/* NEGACI√ìN (:not())
   - Selecciona todo EXCEPTO lo que est√° entre par√©ntesis */
.articulo-pseudoclases *:not(p) {
    background-color: chocolate;
}

/* ==========================================
   PSEUDOELEMENTOS EN CSS
   ========================================== 
   Los pseudoelementos nos permiten a√±adir contenido o estilos a partes
   espec√≠ficas de un elemento. Se escriben con DOS dos puntos (::)
   a diferencia de las pseudoclases que usan solo uno (:) */

/* ==========================================
   1. PSEUDOELEMENTOS ::before y ::after
   ========================================== 
   Estos pseudoelementos nos permiten a√±adir contenido ANTES o DESPU√âS
   del contenido principal del elemento.
   
   IMPORTANTE: Siempre necesitan la propiedad 'content' para funcionar */

/* ::before - A√±ade contenido AL INICIO del elemento
   Ejemplo: <div class="saga-geminis">Saga de G√©minis</div>
   Resultado: üíÄ Saga de G√©minis */
.saga-geminis::before {
    content: "üíÄ";
    /* Sin content, el ::before no aparecer√≠a */
}

/* ::after - A√±ade contenido AL FINAL del elemento
   Ejemplo: <div class="saga-geminis">Saga de G√©minis</div>
   Resultado: Saga de G√©minis üî• */
.saga-geminis::after {
    content: "üî•";
}

/* Ejemplo pr√°ctico: A√±adir s√≠mbolos de moneda
   <div class="saga-precio">99.99</div>
   Resultado: $üí∞ 99.99 USB */
.saga-precio::before {
    content: "$üí∞";
    font-weight: bold;
}

.saga-precio::after {
    content: "USB";
    font-weight: bold;
}

/* ==========================================
   2. PSEUDOELEMENTOS DE TEXTO
   ========================================== */

/* ::first-letter - Estiliza la PRIMERA LETRA del texto
   Muy √∫til para crear letras capitulares o efectos decorativos
   
   Ejemplo:
   <p class="p-pseudoelementos">Este es un p√°rrafo...</p>
   Resultado: La 'E' aparecer√° m√°s grande y en negrita */
.p-pseudoelementos::first-letter {
    font-size: 40px;
    font-weight: bold;
}

/* ::first-line - Estiliza la PRIMERA L√çNEA del texto
   La primera l√≠nea se ajusta autom√°ticamente seg√∫n el ancho del contenedor
   
   Ejemplo:
   <p class="p-pseudoelementos">Primera l√≠nea...\nSegunda l√≠nea...</p>
   Resultado: Solo la primera l√≠nea ser√° de color coral */
.p-pseudoelementos::first-line {
    color: coral;
}

/* ::selection - Estiliza el texto cuando el usuario lo SELECCIONA
   Afecta al color del texto y fondo cuando el usuario selecciona con el mouse
   
   Ejemplo: Al seleccionar el texto con el mouse:
   - El texto se ver√° en verde lim√≥n
   - El fondo de la selecci√≥n ser√° negro */
.p-pseudoelementos::selection {
    color: greenyellow;
    background-color: black;
}

/* ==========================================
   3. PSEUDOELEMENTOS DE FORMULARIO
   ========================================== */

/* ::placeholder - Estiliza el texto placeholder de los inputs
   El placeholder es el texto que aparece antes de que el usuario escriba
   
   Ejemplo:
   <input class="input-pseudoelementos" placeholder="Escribe aqu√≠...">
   Resultado: El texto "Escribe aqu√≠..." aparecer√° en rojo y cursiva */
.input-pseudoelementos::placeholder {
    color: red;
    font-style: italic;
}

/* ==========================================
   NOTAS IMPORTANTES SOBRE PSEUDOELEMENTOS
   ========================================== 
   1. Los pseudoelementos usan DOS dos puntos (::) aunque tambi√©n funcionan
      con uno solo (:) por compatibilidad con versiones antiguas
   
   2. ::before y ::after SIEMPRE necesitan la propiedad 'content'
   
   3. ::before y ::after son elementos en l√≠nea por defecto
   
   4. Pueden usarse para crear efectos decorativos sin modificar el HTML
   
   5. Son muy √∫tiles para:
      - A√±adir iconos
      - Crear dise√±os decorativos
      - Agregar contenido din√°mico
      - Mejorar la tipograf√≠a */

/* Agrupar Selectores */
.form-agrupar-selectores input[type="text"],
.form-agrupar-selectores input[type="email"],
.form-agrupar-selectores textarea {
    border-color: yellow;
    border-width: 2px;
    border-style: dashed;
    background-color: black;
    font-size: 20px;
    display: block;
    width: 300px;
}

/* ==========================================
   ALGORITMO DE CSS
   ========================================== 
   El algoritmo de CSS es fundamental para entender c√≥mo el navegador 
   aplica los estilos al HTML. Se compone de tres conceptos principales:
   
   1. La Cascada
   2. La Especificidad
   3. La Herencia */


/* ==========================================
   1. LA CASCADA
   ========================================== 
   Es el mecanismo que usa el navegador para decidir qu√© estilos aplicar.
   Sigue este orden de prioridad:

   1) Origen del c√≥digo (de menor a mayor prioridad):
      - User Agent (estilos predeterminados del navegador)
      - Personalizaciones del usuario
      - Estilos del autor (tu c√≥digo CSS)
   
   2) Especificidad del selector (ver siguiente secci√≥n)
   
   3) Orden de aparici√≥n (el √∫ltimo c√≥digo escrito gana) */


/* ==========================================
   2. LA ESPECIFICIDAD
   ========================================== 
   Es el peso o importancia que tiene cada selector.
   Se calcula usando 4 n√∫meros: A,B,C,D
   
   Donde:
   A (1,0,0,0) = Estilos en l√≠nea (style="")
   B (0,1,0,0) = IDs (#elemento)
   C (0,0,1,0) = Clases (.elemento), atributos y pseudoclases
   D (0,0,0,1) = Etiquetas y pseudoelementos
   
   !important = Rompe las reglas de especificidad */


/* ==========================================
   EJEMPLOS PR√ÅCTICOS DE ESPECIFICIDAD
   ========================================== 
   A continuaci√≥n veremos ejemplos con diferentes niveles de especificidad.
   El color de fondo que se aplica depender√° de la especificidad del selector. */

/* Especificidad: 0,1,1,1 (1 ID + 1 clase + 1 etiqueta) */
blockquote#cita-marco.cita-marco {
    background-color: antiquewhite;
}

/* Especificidad: 0,0,0,1 (solo etiqueta) */
blockquote {
    background-color: blueviolet;
}

/* Especificidad: 0,1,0,0 (solo ID) */
#cita-marco {
    background-color: aquamarine;
}

/* Especificidad: 0,0,1,1 (1 clase + 1 etiqueta) */
blockquote.cita-marco {
    background-color: blue;
}

/* Especificidad: 0,0,1,0 (solo clase) */
.cita-marco {
    background-color: brown;
}

/* Especificidad: !important (rompe la especificidad) 
   Este estilo ganar√° sin importar los otros selectores */
.cita-marco {
    background-color: cadetblue !important;
}

/* Especificidad: 0,1,0,1 (1 ID + 1 etiqueta) */
blockquote#cita-marco {
    background-color: lightsalmon;
}

/* !important sobrescribe cualquier otra regla */
.cita-marco {
    background-color: lightseagreen !important;
}

/* ==========================================
   RESUMEN DE ESTE EJEMPLO
   ========================================== 
   
   Si aplicamos estos estilos a:
   <blockquote id="cita-marco" class="cita-marco">Texto</blockquote>

   El color final ser√° lightseagreen porque:
   
   1. Tiene !important que rompe la especificidad
   2. Al haber dos reglas con !important, gana la √∫ltima en aparecer
   
   Sin los !important, el orden de especificidad ser√≠a:
   
   1. blockquote#cita-marco.cita-marco (0,1,1,1)
   2. blockquote#cita-marco (0,1,0,1)
   3. #cita-marco (0,1,0,0)
   4. blockquote.cita-marco (0,0,1,1)
   5. .cita-marco (0,0,1,0)
   6. blockquote (0,0,0,1)

   CONSEJO: Evita usar !important cuando sea posible, ya que hace 
   el c√≥digo m√°s dif√≠cil de mantener. Es mejor usar selectores
   m√°s espec√≠ficos. */

/* ==========================================
   LA HERENCIA EN CSS
   ========================================== 
   https://web.dev/learn/css/inheritance?hl=es#which-properties-are-inheritable
   La herencia es como un sistema familiar en CSS:
   - Los elementos "padres" pasan sus propiedades a sus elementos "hijos"
   - Algunas propiedades se heredan autom√°ticamente
   - Otras necesitan ser heredadas manualmente
   
   Palabras clave importantes:
   - inherit: "Usa el mismo valor que mi padre"
   - initial: "Vuelve al valor predeterminado"
   
   
   ========== PROPIEDADES QUE SE HEREDAN AUTOM√ÅTICAMENTE ==========
   
   Principalmente las relacionadas con texto:
   - color
   - font-family
   - font-size
   - font-style
   - font-weight
   - text-align
   - line-height
   
   
   ========== PROPIEDADES QUE NO SE HEREDAN AUTOM√ÅTICAMENTE ==========
   
   Principalmente las relacionadas con layout y espaciado:
   - margin
   - padding
   - border
   - background
   - position
   - display */


/* ==========================================
   EJEMPLO PR√ÅCTICO DE HERENCIA
   ========================================== 

   Estructura HTML de ejemplo:
   <div class="cita-marco">
       Texto del div
       <cite>Texto dentro del cite</cite>
   </div> */

/* Estilos del elemento padre */
.cita-marco {
    /* Propiedades con !important sobrescriben todo */
    background-color: moccasin !important;
    background-color: darkorange !important;
    /* Este gana por ser el √∫ltimo */

    /* Propiedades que normalmente se heredan */
    font-size: 32px;
    /* Se hereda autom√°ticamente */

    /* Propiedades que normalmente no se heredan */
    border-style: dotted;
    /* No se hereda autom√°ticamente */
    border-color: red;
    /* No se hereda autom√°ticamente */
}

/* Estilos del elemento hijo */
.cita-marco cite {
    /* Ejemplo 1: Herencia de background-color */
    background-color: pink;
    /* Primero define su propio color */
    background-color: inherit;
    /* Luego hereda el color del padre (darkorange) */

    /* Ejemplo 2: Manejo de font-size */
    font-size: 24px;
    /* Define su propio tama√±o */
    font-size: initial;
    /* Vuelve al tama√±o predeterminado del navegador */

    /* Ejemplo 3: Herencia expl√≠cita de bordes */
    border-style: inherit;
    /* Hereda el estilo dotted del padre */
    border-color: inherit;
    /* Hereda el color red del padre */
}

/* ==========================================
   EXPLICACI√ìN DEL EJEMPLO ANTERIOR
   ========================================== 

   1. En el elemento padre (.cita-marco):
      - Establece un color de fondo naranja (!important)
      - Define un tama√±o de letra de 32px
      - Establece un borde punteado rojo
   
   2. En el elemento hijo (cite):
      - Intenta tener un fondo rosa, pero luego hereda el naranja del padre
      - Intenta tener letra de 24px, pero vuelve al tama√±o inicial
      - Hereda expl√≠citamente el estilo y color del borde
   
   Resultado final del elemento cite:
      - Fondo: darkorange (heredado por inherit)
      - Tama√±o de letra: tama√±o base del navegador (por initial)
      - Borde: punteado rojo (heredado expl√≠citamente)


   ==========================================
   CONSEJOS PR√ÅCTICOS SOBRE HERENCIA
   ========================================== 
   
   1. Usa 'inherit' cuando quieras:
      - Mantener consistencia visual
      - Asegurar que un elemento hijo se parezca a su padre
   
   2. Usa 'initial' cuando quieras:
      - "Reiniciar" una propiedad
      - Ignorar los valores heredados
      - Volver al valor por defecto del navegador
   
   3. Ten en cuenta que:
      - No todas las propiedades se heredan por defecto
      - La herencia puede ser sobrescrita
      - !important afecta tambi√©n a la herencia */